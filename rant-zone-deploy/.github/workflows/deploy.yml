name: Deploy Rant.Zone Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Frontend Dependencies
        run: cd frontend && npm ci
      
      - name: Install Backend Dependencies
        run: cd backend && npm ci
      
      - name: Run Frontend Tests
        run: cd frontend && npm run lint
      
      - name: Run Backend Tests
        run: cd backend && npm run lint

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        run: |
          cd backend
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Set Fly.io Secrets
        run: |
          flyctl secrets set DATABASE_URL="${{ secrets.DATABASE_URL }}"
          flyctl secrets set REDIS_URL="${{ secrets.REDIS_URL }}"
          flyctl secrets set JWT_SECRET="${{ secrets.JWT_SECRET }}"
          flyctl secrets set ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"
          flyctl secrets set NODE_ENV="production"
          flyctl secrets set PORT="3001"
          flyctl secrets set HOST="0.0.0.0"
          flyctl secrets set LOG_LEVEL="info"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: cd frontend && npm ci
      
      - name: Build Frontend
        run: cd frontend && npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WEBSOCKET_URL: ${{ secrets.NEXT_PUBLIC_WEBSOCKET_URL }}
          NEXT_PUBLIC_APP_ENV: production
          NEXT_PUBLIC_ENABLE_ANALYTICS: true
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          echo "Deployment completed"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "‚úÖ All deployments successful!"
            echo "üåê Frontend: ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}"
            echo "üîß Backend: ${{ secrets.NEXT_PUBLIC_API_URL }}"
          else
            echo "‚ùå Some deployments failed"
            exit 1
          fi 